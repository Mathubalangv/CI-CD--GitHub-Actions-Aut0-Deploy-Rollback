name: AWS ECS Deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1  # Replace with your AWS region if different
  ECR_REPOSITORY: demo-repo  # Replace with your ECR repository name
  ECS_SERVICE: demo-service  # Replace with your ECS service name
  ECS_CLUSTER: demo-cluster  # Replace with your ECS cluster name
  ECS_TASK_DEFINITION: demo-task  # Replace with your ECS task definition name
  CONTAINER_NAME: demo-container  # Your container name in the task definition

jobs:
  build-deploy-container-app:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Run Integration Tests
        run: |
          cd myapp
          npm run test:integration  # Ensure you have integration tests set up


      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: demo-container  # Ensure this matches the container name in your task definition
          image: ${{ env.image }}

      - name: Deploy updated task definition to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: ${{ env.demo-service }}
          cluster: ${{ env.demo-cluster }}
          wait-for-service-stability: true

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back."
          # Rollback to the previous task definition if needed
          PREVIOUS_TASK_DEFINITION=$(aws ecs list-task-definitions --sort DESC --max-items 2 --query "taskDefinitionArns[1]" --output text)
          if [ -n "$PREVIOUS_TASK_DEFINITION" ]; then
           aws ecs update-service --cluster demo-cluster --service demo-service --task-definition $PREVIOUS_TASK_DEFINITION
          else
           echo "No previous task definition found. Manual intervention required."
          fi

